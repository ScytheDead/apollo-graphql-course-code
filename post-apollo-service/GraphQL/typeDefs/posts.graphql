extend type Query {
  posts(start: Int = 0, length: Int = 10, sortByProperty: String = "created_at", isSortASC: Boolean = false): PostResponse # @cacheControl(maxAge: 500)
  post(id: ID!): PostResponse 
}

extend type Mutation {
  addPost(title: String!, content: String!, imageURL: String): PostResponse
  updatePost(
    _id: ID!
    title: String
    content: String
    imageURL: String
    status: AllowedPostStatus
  ): PostResponse
  deletePost(_id: ID!): PostResponse
  clapPost(_id: ID!): PostResponse
}

enum AllowedPostStatus {
  SHOW
  HIDDEN
}

type Post @key(fields: "_id") {
  _id: ID!
  user: User
  title: String
  content: String
  imageURL: String
  status: String
  clap: [User]
  # comments: [Comment],
  created_at: String,
  updated_at: String
}

type Response {
  result: String
  message: String
  data: Post
}

union PostResponse = PostResult | PostUnauthorized

type PostResult {
  result: String
  message: String
  data: PostData
}

type PostUnauthorized {
  error: String
}

union PostData = Post | ListPost

type ListPost @key(fields: "user"){
  user: ID!
  posts: [Post]
}

extend type User @key(fields: "_id") {
  _id: ID! @external
  # posts: [Post]
  # subscribes: [Post]
}

